---

firezone_enabled: true
firezone_identifier: firezone

firezone_hostname: ''
firezone_path_prefix: /firezone


firezone_generic_secret: ""
firezone_default_admin_email: ""
firezone_default_admin_password: ""

firezone_uid: ''
firezone_gid: ''

firezone_base_path: "/{{ firezone_identifier }}"
firezone_config_path: "{{ firezone_base_path }}/config"
firezone_data_path: "{{ firezone_base_path }}/data"
firezone_env_path: "{{ firezone_config_path }}/env"

firezone_systemd_required_services_list: ['docker.service']

firezone_version: 0.7.25

firezone_container_image: "{{ firezone_container_image_registry_prefix }}firezone/firezone:{{ firezone_container_image_tag }}"
firezone_container_image_registry_prefix: docker.io/
firezone_container_image_tag: "{{ firezone_version }}"
firezone_container_image_force_pull: "{{ firezone_container_image.endswith(':latest') }}"

firezone_container_network: '{{ firezone_identifier }}'

firezone_webui_bind_port: 13000

# A list of additional container networks that the container would be connected to.
# The role does not create these networks, so make sure they already exist.
# Use this to expose this container to a reverse proxy, which runs in a different container network.
firezone_container_additional_networks: []

# firezone_container_labels_traefik_enabled controls whether labels to assist a Traefik reverse-proxy will be attached to the container.
# See `../templates/labels.j2` for details.
#
# To inject your own other container labels, see `firezone_container_labels_additional_labels`.
firezone_container_labels_traefik_enabled: true
firezone_container_labels_traefik_docker_network: "{{ firezone_container_network }}"
firezone_container_labels_traefik_hostname: "{{ firezone_hostname }}"
# The path prefix must either be `/` or not end with a slash (e.g. `/firezone`).
firezone_container_labels_traefik_path_prefix: "{{ firezone_path_prefix }}"
firezone_container_labels_traefik_rule: "Host(`{{ firezone_container_labels_traefik_hostname }}`){% if firezone_container_labels_traefik_path_prefix != '/' %} && PathPrefix(`{{ firezone_container_labels_traefik_path_prefix }}`){% endif %}"
firezone_container_labels_traefik_priority: 0
firezone_container_labels_traefik_entrypoints: web-secure
firezone_container_labels_traefik_tls: "{{ firezone_container_labels_traefik_entrypoints != 'web' }}"
firezone_container_labels_traefik_tls_certResolver: default  # noqa var-naming

# Controls which additional headers to attach to all HTTP requests.
# To add your own custom request headers, use `firezone_container_labels_traefik_additional_response_headers_custom`
firezone_container_labels_traefik_additional_request_headers: "{{ firezone_container_labels_traefik_additional_request_headers_auto | combine(firezone_container_labels_traefik_additional_request_headers_custom) }}"
firezone_container_labels_traefik_additional_request_headers_auto: {}
firezone_container_labels_traefik_additional_request_headers_custom: {}

# Controls which additional headers to attach to all HTTP responses.
# To add your own custom response headers, use `firezone_container_labels_traefik_additional_response_headers_custom`
firezone_container_labels_traefik_additional_response_headers: "{{ firezone_container_labels_traefik_additional_response_headers_auto | combine(firezone_container_labels_traefik_additional_response_headers_custom) }}"
firezone_container_labels_traefik_additional_response_headers_auto: |
  {{
    {}
    | combine ({'X-XSS-Protection': firezone_http_header_xss_protection} if firezone_http_header_xss_protection else {})
    | combine ({'X-Frame-Options': firezone_http_header_frame_options} if firezone_http_header_frame_options else {})
    | combine ({'X-Content-Type-Options': firezone_http_header_content_type_options} if firezone_http_header_content_type_options else {})
    | combine ({'Content-Security-Policy': firezone_http_header_content_security_policy} if firezone_http_header_content_security_policy else {})
    | combine ({'Permission-Policy': firezone_http_header_content_permission_policy} if firezone_http_header_content_permission_policy else {})
    | combine ({'Strict-Transport-Security': firezone_http_header_strict_transport_security} if firezone_http_header_strict_transport_security and firezone_container_labels_traefik_tls else {})
  }}
firezone_container_labels_traefik_additional_response_headers_custom: {}

# Specifies the value of the `X-XSS-Protection` header
# Stops pages from loading when they detect reflected cross-site scripting (XSS) attacks.
#
# Learn more about it is here:
# - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
# - https://portswigger.net/web-security/cross-site-scripting/reflected
firezone_http_header_xss_protection: "1; mode=block"

# Specifies the value of the `X-Frame-Options` header which controls whether framing can happen.
# See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
firezone_http_header_frame_options: SAMEORIGIN

# Specifies the value of the `X-Content-Type-Options` header.
# See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
firezone_http_header_content_type_options: nosniff

# Specifies the value of the `Content-Security-Policy` header.
# See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy
firezone_http_header_content_security_policy: frame-ancestors 'self'

# Specifies the value of the `Permission-Policy` header.
# See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permission-Policy
firezone_http_header_content_permission_policy: "{{ 'interest-cohort=()' if firezone_floc_optout_enabled else '' }}"

# Specifies the value of the `Strict-Transport-Security` header.
# See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
firezone_http_header_strict_transport_security: "max-age=31536000; includeSubDomains{{ '; preload' if firezone_hsts_preload_enabled else '' }}"

# Controls whether to send a "Permissions-Policy interest-cohort=();" header along with all responses
#
# Learn more about what it is here:
# - https://www.eff.org/deeplinks/2021/03/googles-floc-terrible-idea
# - https://paramdeo.com/blog/opting-your-website-out-of-googles-floc-network
# - https://amifloced.org/
#
# Of course, a better solution is to just stop using browsers (like Chrome), which participate in such tracking practices.
# See: `firezone_content_permission_policy`
firezone_floc_optout_enabled: true

# Controls if HSTS preloading is enabled
#
# In its strongest and recommended form, the [HSTS policy](https://www.chromium.org/hsts) includes all subdomains, and
# indicates a willingness to be "preloaded" into browsers:
# `Strict-Transport-Security: max-age=31536000; includeSubDomains; preload`
# For more information visit:
# - https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
# - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
# - https://hstspreload.org/#opt-in
# See: `firezone_http_header_strict_transport_security`
firezone_hsts_preload_enabled: false


# firezone_container_labels_additional_labels contains a multiline string with additional labels to add to the container label file.
# See `roles/custom/collabora_online/templates/labels.j2` for details.
#
# Example:
# firezone_container_labels_additional_labels: |
#   my.label=1
#   another.label="here"
firezone_container_labels_additional_labels: ''


firezone_telemetry_enabled: false
firezone_wireguard_container_port: 51820
firezone_wireguard_bind_port: "{{ firezone_wireguard_container_port }}"

firezone_guardian_secret_key: "{{ ('%s' | format(firezone_generic_secret) | password_hash('sha512', 'fz.gd.sc.key', rounds=655555))[-64:] | b64encode | truncate(32, True, '') }}"
firezone_database_encryption_key: ""
firezone_secret_key_base: "{{ ('%s' | format(firezone_generic_secret) | password_hash('sha512', 'fz.sc.key.base', rounds=655555))[-64:] | b64encode }}"
firezone_live_view_signing_salt: "{{ ('%s' | format(firezone_generic_secret) | password_hash('sha512', 'fz.l.vw.sg.salt', rounds=655555))[-64:] | b64encode }}"
firezone_cookie_signing_salt: "{{ ('%s' | format(firezone_generic_secret) | password_hash('sha512', 'fz.ck.sg.salt', rounds=655555))[-64:] | b64encode }}"
firezone_cookie_encryption_salt: "{{ ('%s' | format(firezone_generic_secret) | password_hash('sha512', 'fz.ck.ec.salt', rounds=655555))[-64:] | b64encode }}"
